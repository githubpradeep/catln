import stack/core/primitives.ct
import stack/core/compile.ct

# # Catln Core Abstract Algebra Types

  These types define some of the basic relationship and classes

class Eq

# The Eq class is used to define values which can be compared for equality.
  While naive tuple equality often works, some types have equality that behaves differently and must be defined.
  For example, a TreeSet can insert items in different order and produce different trees, but with equal sets.
  There are only two operations for eq: [operator==] and [operator!=].

operator==<Eq $T>($T l, $T r) -> Boolean

# The first operation checks whether two items are equal.
  Note that it only compares like items with each other, not that you can compare apples to oranges.

operator!=<Eq $T>($T l, $T r) -> Boolean
  # The second operation is check if they are not equal.

# It is the opposite of the first operation leading to the simple definition:

operator!=(l, r) = ~(l == r)

# Given this, creating an instance of Eq only requires defining equality and the != can be produced automatically.

# ## Ordering

# Ordering is used to define operations that have a natural ability to be ordered or sorted.
  Some examples include numbers which are sorted from smallest to largest or strings which are sorted alphabetically.

# There are two different forms of ordering:

class Ord

# Ord is used to define types which can be strictly ordered.
  Every element, when compared must have one of the following [Ordering] relationships:

class Ordering = LessThan | Equal | GreaterThan

# The Orderings can relate any like items of Ord. 

class POrd

# In addition to Ord, POrd defines a partial ordering.
  Partially ordered items can be compared, but may result in NoOrdering:

# TODO: POrdering should treat Ordering as a reference, not as a new type

class POrdering = Ordering | NoOrdering

# As an example, sets can be partiall ordered by the subset operation.
  One set A <= B when A is a subset of B.
  An ordered example is {1} <= {1, 2}.
  But, two sets like {1} and {2} have no ordering between them.

# There are a few nice properties about ordering.

every Ord isa POrd

# This means that something fully ordered can still take advantage of many of the same functions as partially ordered ones.
  It just usually results in a more specific result.

compare<Ord $T>($T l, $T r) -> Ordering
compare<POrd $T>($T l, $T r) -> POrdering

# The only major function is compare.
  Comparing two orderables will result in an ordering.
  Likewise, comparing two partially orderables results in a POrdering.

# ### Operators for ordering

operator<=<Ord $T>($T l, $T r) -> Boolean
operator>=<Ord $T>($T l, $T r) -> Boolean
operator<<Ord $T>($T l, $T r) -> Boolean
operator><Ord $T>($T l, $T r) -> Boolean

every POrd isa Eq

# If something can be compared for order, it should also be comparable for equality.
  Basically, if compare

# operator==<POrd $T>($T l, $T r) = compare(l=l, r=r) == Equal

# max<Ord $T>($T l, $T r) -> $T = if l >= r then l else r
# min<Ord $T>($T l, $T r) -> $T = if l <= r then l else r

# TODO: Tests and properties for compare


# ## Semigroup

class Semigroup
every Semigroup isa Eq

mappend<Semigroup $T>($T l, $T r) -> $T

testSemigroupAssociative<Semigroup $T>($T a, $T b, $T c) =
  #test
  #assert(test=mappend(l=mappend(l=a, r=b), r=c) == mappend(l=a, r=mappend(l=b, r=c)))
  0

class Monoid
every Monoid isa Semigroup

mempty<Monoid $T> -> $T

testRightMonoidIdentity<Monoid $T>($T t) =
  #test
  #assert(test=mappend(l=t, r=mempty) == t)
  0

testLeftMonoidIdentity<Monoid $T>($T t) =
  #test
  #assert(test=mappend(l=mempty, r=t) == t)
  0

# mconcat<Monoid $T>(List<$T> lst) = lst.fold(mappend, mempty)

class CommutativeMonoid

# This is also called an Abelian Monoid

every CommutativeMonoid isa Monoid

testCommutativeMonoid<CommutativeMonoid $T>($T a, $T b) =
  #test
  #assert(test=mappend(l=a, r=b) == mappend(l=b, r=a))
  0

class Group
every Group isa Monoid

inverse<Group $T>($T t) -> $T

testGroup<Group $T>($T t) =
  #test
  #assert(test=mappend(l=t, r=inverse(t)) == mempty)
  #assert(test=mappend(l=inverse(t), r=t) == mempty)
  0