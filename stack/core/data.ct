import stack/core/primitives.ct

// # Catln Core Data Types

// ## String

data String
operator==(String l, String r) -> Boolean

String.toString -> String = this
Integer.toString -> String

// ## Collections

class Functor<$T>
// $F<$T=$A>.fmap<Functor $F>(fn($A) -> $B) -> $F<$T=$B>

// ## Collections

class Option<$T> = $T | None

every Option<$T> isa Functor
// None.fmap(fn) = None
// $T.fmap(fn($T)) = fn(this)

// ## List

class List<$T>

class ConsList<$T> = Cons<$T>($T head, ConsList<$T> tail) | Nil
operator::<$T>($T l, ConsList<$T> r) = Cons(head=l, tail=r)

Nil.length = 0
Cons(head, tail).length = 1 + tail.length

every ConsList<$T> isa Functor
// Nil.fmap(fn) = Nil
// Cons(head, tail).fmap(fn) = Cons(head=fn(head), tail=tail.fmap(fn))

// ## Set

class Set<$T>

// ## Enum

class Enum

enum<Enum $T> -> Set<$T>