operator-(Integer a) -> Integer

operator-(Integer l, Integer r) -> Integer
operator+(Integer l, Integer r) -> Integer
operator*(Integer l, Integer r) -> Integer

operator<=(Integer l, Integer r) -> Boolean
operator>=(Integer l, Integer r) -> Boolean
operator<(Integer l, Integer r) -> Boolean
operator>(Integer l, Integer r) -> Boolean
operator==(Integer l, Integer r) -> Boolean
operator!=(Integer l, Integer r) -> Boolean

operator~(Boolean a) -> Boolean
operator~(True a) = False
operator~(False a) = True

operator&(Boolean l, Boolean r) -> Boolean
operator&(True l, True r) = True
operator&(True l, False r) = False
operator&(False l, True r) = False
operator&(False l, False r) = False

operator|(Boolean l, Boolean r) -> Boolean
operator|(True l, True r) = True
operator|(True l, False r) = True
operator|(False l, True r) = True
operator|(False l, False r) = False

operator^(Boolean l, Boolean r) -> Boolean
operator^(True l, True r) = False
operator^(True l, False r) = True
operator^(False l, True r) = True
operator^(False l, False r) = False

class Number = Integer | Float
class Boolean = True | False

class ConsList = Cons(Integer head, ConsList tail) | Nil
operator::(Integer l, ConsList r) = Cons(head=l, tail=r)

length(l=Nil) = 0
// TODO: Fix example below which should work without explicit return value
length(l=Cons(head, tail)) -> Integer = 1 + length(l=tail)