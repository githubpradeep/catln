- Handle TypeCheckErrors from runConstraints in TypeCheck.hs

- Include line number in Syntax Results
  - Unified CompileError type

- Case, conditionals
  1. Add the ability to have conditional expression guards to declarations and (I think) Arrows
  2. Create an Else arrow that takes effect only when other arrows don't
  3. Create syntactic sugar for:
     - Match/case statement
     - if/else statement
     - Casc match statement

- Macros, Generics, Context
  1. Macros
     - Create macros. Use zip as the sample to test with
  2. Generics
  3. Context
     1. fmap, mmap, umap
     2. map syntax (do notation)
     3. Context type (and macro for mapping it)
     4. Context syntax

- Fix Main(Repl), Codegen
    - Main(Repl)
      1. Add IO
      2. Reformulate the repl to add statements to the environment, expr adds temporary value to environment to evaluate it to val
    - Codegen
      1. Divide eval to separate the envLookup to form evaluation trees from to share with codegen
      2. Fix rest of codegen

- Code formatter
  1. Add comments into the RawPrgm syntax and parser
  1. Modify the RawPrgm syntax to fully align with all language possibilities
  3. Build formatter
     - Output format to file
     - Check format against file

- Program Optimization
  - Convert the ResArrowTree formating to include sorting of values

Have encode use classMap to check if types specified are a class or object
Fix parser and test on using multiple applies in a row `fun(a=1)(b=2)`
Make CompAnnot an enum over allowed compiler annotations and desugar goes from untyped RawCompAnnot tuple to the enum. Maybe wait until after typechecking to desugar, though
Types
  Type with defaultNames
  Type Properties
Typecheck in order of topological sort of function calls
  Compute with downstream functions as upper bound external
  Compute one strongly connected component at a time
Add caching within the pipeline for reading files, typechecking, expression evaluating, etc.
Automatically compute properties of constants
Typecheck when errors during parsing
Make desugar curry all values to the closure instead of checking which ones are used, then run a pass that gets rid of unused arguments to a function.
     Before this, add compiler warnings for all unused values in a function
Do a pattern match against all expressions to see if they contain a subset which is equivalent to another function. In this case, throw a warning to use the higher function and replace in the code. This can take place during or after desugaring.
Add tests
  QuickTest
  Repl Test
ArrowTesting
Debugging tools (Treebugging)
LSP and IDE Integration


Bad input testing
    Prevent using the same name for both a typeclass and an object
    Prevent making inner definition with same name as outer definition
    Prevent using lowercase name for type unless there is also a function def
    
Implicit conversions
Contexts
Imports
Exports
Handle mutual recursion
Formatter

Minor
  Desugarf recognize variable called in itself
  Desugarf recognize mutually calling variables
  Detect unused functions and vars (in desugar?)

Research
  multiple implements type (int monoid with addition, int monoid with multiplication)
  prove function properties (map.map with a function that given two different keys must return different keys will return a map instead of a generic collection)
  multiple possible uses of a type such as Ord. Given any Ordering, the filter function preserves it. But, there can also be default orderings
