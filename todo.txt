Compiler annotations and convert "assert" into the first one
Types
  Type with defaultNames
  type classes
  Property
Parameterized types and methods
Typecheck in order of topological sort of function calls
  Compute with downstream functions as upper bound external
  Compute one strongly connected component at a time
Case, conditionals, pattern matching
Automatically compute properties of constants
Typecheck when errors during parsing
Operator overloading
  Move runtime definitions to code
Add tests
  QuickTest
  Repl Test
Re-add emit, codegen, jit, cbits (runtime)
Map
  fmap, mmap, umap
  map syntax (do notation)
Include line number in Syntax Results
  Unified CompileError type

Bad input testing
    Prevent making inner definition with same name as outer definition
    Prevent using lowercase name for type unless there is also a function def
    
Implicit conversions
Contexts
Imports
Exports
Handle mutual recursion
Formatter

Minor
  Desugarf recognize variable called in itself
  Desugarf recognize mutually calling variables
  Detect unused functions and vars (in desugar?)

Research
  multiple implements type (int monoid with addition, int monoid with multiplication)
  prove function properties (map.map with a function that given two different keys must return different keys will return a map instead of a generic collection)
  multiple possible uses of a type such as Ord. Given any Ordering, the filter function preserves it. But, there can also be default orderings
  How does currying, function composition, point-free style (function with all arguments and number of args inferred) work?
